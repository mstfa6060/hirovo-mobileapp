/*
!!! ATTENTION !!!
THIS FILE HAS BEEN AUTO-GENERATED
DO NOT EDIT THIS FILE
*/

// Imports 
import { AppConfig, api as axios } from 'hirovo-config';
import { ApiService } from '../../../../services';

// Custom Types 
type Guid = string;
type Double = number;

// Settings...

export namespace IAMAPI {

	export namespace Enums {

		export enum UserType {
			Worker = 0,
			Employer = 1,
		}

		export enum UserSources {
			Manual = 0,
			Google = 1,
			Apple = 2,
		}

		export enum XSortingDirection {
			Ascending = 0,
			Descending = 1,
		}

		export enum ClientPlatforms {
			Web = 0,
			Mobile = 1,
			Service = 2,
			Unknown = 3,
		}

	}

	export namespace Users {

		export namespace Create {
			export const RequestPath = AppConfig.IAMUrl + '/Users/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				userName: string;
				firstName: string;
				surname: string;
				email: string;
				password: string;
				providerId: string;
				userType: Enums.UserType;
				companyId: Guid;
				userSource: Enums.UserSources;
				description: string;
			}
			export interface IResponseModel {
				id: Guid;
				userName: string;
				email: string;
				firstName: string;
				surname: string;
				isActive: boolean;
				userType: Enums.UserType;
			}
		}

	}

	export namespace Roles {

		export namespace All {
			export const RequestPath = AppConfig.IAMUrl + '/Roles/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				isDeleted: boolean;
			}
		}

		export namespace Update {
			export const RequestPath = AppConfig.IAMUrl + '/Roles/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				id: Guid;
				name: string;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.IAMUrl + '/Roles/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				id: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				isDeleted: boolean;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.IAMUrl + '/Roles/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				id: Guid;
				name: string;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

	}

	export namespace Auth {

		export namespace Login {
			export const RequestPath = AppConfig.IAMUrl + '/Auth/Login';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				provider: string;
				userName: string;
				password: string;
				token: string;
				platform: Enums.ClientPlatforms;
			}
			export interface IResponseModel {
				jwt: string;
				sessionExpirationDate: Date;
				user: IUserResponse;
			}
			export interface IUserResponse {
				id: Guid;
				username: string;
				displayName: string;
				email: string;
				companyId: Guid;
				isCompanyHolding: boolean;
				companyName: string;
			}
		}

	}

}
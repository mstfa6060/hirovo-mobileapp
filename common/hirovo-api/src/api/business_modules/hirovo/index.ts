/*
!!! ATTENTION !!!
THIS FILE HAS BEEN AUTO-GENERATED
DO NOT EDIT THIS FILE
*/

// Imports 
import { AppConfig, api as axios } from 'hirovo-config'; 
import { ApiService } from '../../../../services';

// Custom Types 
type Guid = string; 
type Double = number;

// Settings...

export namespace HirovoAPI {

	export namespace Enums {

		export enum JobType {
			FullTime = 0,
			PartTime = 1,
			Freelance = 2,
		}

		export enum JobStatus {
			Active = 0,
			Closed = 1,
			Filled = 2,
		}

		export enum XSortingDirection {
			Ascending = 0,
			Descending = 1,
		}

	}

	export namespace Workers {

		export namespace UpdateProfile {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/UpdateProfile';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				description: string;
				phoneNumber: string;
				birthDate?: Date;
				city: string;
				district: string;
				isAvailable?: boolean;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Pick {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/Pick';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				selectedIds: Guid[];
				keyword: string;
				limit: number;
			}
			export interface IResponseModel {
				id: Guid;
				fullName: string;
			}
		}

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				description: string;
				phoneNumber: string;
				birthDate?: Date;
				city: string;
				district: string;
				isAvailable?: boolean;
			}
		}

	}

	export namespace Jobs {

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.JobType;
				status: Enums.JobStatus;
				employerId: Guid;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.JobType;
				status: Enums.JobStatus;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				title: string;
				description: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.JobType;
				employerId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

	}

}